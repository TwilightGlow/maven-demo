package com.example.factory.abstractPattern;

/**
 * @author Javen
 * @date 2022/2/2
 */
// 抽象工厂模式与工厂方法模式最大的区别在于，工厂方法模式针对的是一个产品等级结构，而抽象工厂模式需要面对多个产品等级结构，
// 一个工厂等级结构可以负责多个不同产品等级结构中的产品对象的创建。
// 当一个工厂等级结构可以创建出分属于不同产品等级结构的一个产品族中的所有对象时，抽象工厂模式比工厂方法模式更为简单、更有效率。
// 抽象工厂模式：提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类。抽象工厂模式又称为Kit模式，它是一种对象创建型模式。
// ● AbstractFactory（抽象工厂）：它声明了一组用于创建一族产品的方法，每一个方法对应一种产品。
// ● ConcreteFactory（具体工厂）：它实现了在抽象工厂中声明的创建产品的方法，生成一组具体产品，这些产品构成了一个产品族，每一个产品都位于某个产品等级结构中。
// ● AbstractProduct（抽象产品）：它为每种产品声明接口，在抽象产品中声明了产品所具有的业务方法。
// ● ConcreteProduct（具体产品）：它定义具体工厂生产的具体产品对象，实现抽象产品接口中声明的业务方法。

// 简单工厂：用来生产同一等级结构中的任意产品（不支持拓展增加产品）
// 工厂方法：用来生产同一等级结构中的固定产品（支持拓展增加产品）
// 抽象工厂：用来生产不同产品族的全部产品（支持拓展增加产品，支持增加产品族）
// 一般用抽象工厂模式创建工厂，用工厂方法模式创建生产线
public interface SkinFactory {

    Button createButton();
    TextField createTextField();
    ComboBox createComboBox();
}
